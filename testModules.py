from coinmarketcapapi import CoinMarketCapAPI, CoinMarketCapAPIError
import config
import requests

# _api_key = config._api_key
# cmc = CoinMarketCapAPI(_api_key)

capital = 0  # Test Cash
netProfitLoss = 0  # Positive = profit, Negative = loss


def percent_change_custom(price_prev, price_curr):
    p = ((float(price_curr) - float(price_prev))/float(price_prev)) * 100
    return p


def backtest_stoploss():
    # Trailing stop loss notification
    # Set buy_price = peak
    # Latest peak compared to current price
    # If current price < latest peak * 95%
    # Price has dropped 5%, sell
    pass


def backtest_vshort(pi_1, pi_3, pi_5, pi_10):
    r = ''
    if pi_1 > 0.3:
        r += 'RISE DETECTED (PREMATURE) - \n' + pi_1 + '% / MIN\n'
        if pi_3 > 0.5:
            r += pi_3 + '% / 2.5MIN\n'
            if pi_5 > 1:
                r += pi_5 + '% / 5MIN\n'
    return r


def backtest_recent(pi_1, pi_3, pi_5, pi_10):
    r = ''
    # Spike test 10 mins
    if pi_10 > 5:
        r = 'RISE DETECTED - ' + pi_10 + '% / 10MIN\n'
        # Only show the rest if the are positive
        if pi_5 > 0:
            r += pi_5 + '% / 5MIN\n'
            if pi_3 > 0:
                r += pi_3 + '% / 2.5MIN'
    elif pi_10 < -5:
        r = 'DROP DETECTED -' + pi_10 + '% / 10MIN\n'
        # Only show the rest if the are negative
        if pi_5 < 0:
            r += pi_5 + '% / 5MIN\n'
            if pi_3 < 0:
                r += pi_3 + '% / 2.5MIN\n'
                if pi_1 < 0:
                    r += pi_1 + '% / MIN'
    # Fixed stop loss detection
    if pi_1 > 3:
        r = 'INSANE RISE DETECTED -' + pi_1 + '% / MIN'
    if pi_1 < -3:
        r = 'INSANE DROP DETECTED -' + pi_1 + '% / MIN'
    return r


def backtest_trend(pi_30, pi_60, pi_180):
    r = ''
    # BTest - Long
    if pi_180 > 0:
        r += '3H UPTREND DETECTED'
    if pi_30 > 0:
        r += '30MIN UPTREND DETECTED'
    return r


def should_buy_sell_wait(pi_1, pi_3, pi_5, pi_7, pi_10, pi_15, pi_30, pi_60, pi_180, interval):
    # Check 1m, 2.5m, 5m, 7.5m, 10m, 15m, 30, 1h, 3h
    # if 10 interval > 10% and 60 interval positive and 180 interval positive

    # Theoretical percentages
    # 1   | 0.25
    # 2.5 |
    # 5   |
    # 10  |
    # 15  |
    # 30  |
    # 60  |
    # 180 |

    recent_outcome = backtest_recent(pi_1, pi_3, pi_5, pi_10)
    trend = backtest_trend(pi_30, pi_60, pi_180)

    if trend != '' or recent_outcome != '':
        return '-- TREND INFORMATION --\n\n' + trend + '\n\n' + '-- RECENT OUTCOMES --\n\n' + recent_outcome
    return ''


# Simulation environment with account balance, crypto balance
# Messenger notification api
def send_notify(msg):
    a_head = "-- Live Crypto Updates --\n-------------\nHow to read:\n- Interval times are shown with spiking" \
             "activity\n- 'SURGE' indicates price surging\n- 'HEALTHY' indicates steady price increase\n\n-------------"
    a_foot = "\n\n-- This message was generated by a bot --"
    payload = {
        'content': msg
    }
    header = {
        'authorization': 'ODQ1NjQ5OTczNjc1OTUwMTYx.YKkDEg.oj5fAHC0FfUz9qXfDj3PiWr4qyY'
    }
    requests.post('https://discord.com/api/v9/channels/844078259729334315/messages',
                  data=payload, headers=header)


# Getters and Setters
def get_current_profits():
    pass


# def get_percentages_1h():
#     return percentages_history_1h
#
#
# def get_prices():
#     return prices


# Test Modules
def test_buy(capital, netpl):
    pass


def test_sell():
    pass


# def get_latest_percent_1h():
#     try:
#         cmc_data = cmc.cryptocurrency_listings_latest().data
#         for x in cmc_data:
#             if x['symbol'] == 'ADA':
#                 p = json.loads(json.dumps(x))['quote']['USD']['percent_change_1h']
#                 return p
#     except ValueError:
#         print('JSON decoding has failed')

def get_latest_eth():
    cs_prices = requests.get('https://www.coinspot.com.au/pubapi/latest/ETH').json()['prices']
    return cs_prices['ask']


def get_latest_prices():
    response = requests.get('https://www.coinspot.com.au/pubapi/latest')
    return response.text


# def store_price(currtime):
#     prices.__setitem__(currtime, get_prices())
#
#
# def average_prices_hourly():
#     prices_hour_past = [key for key in prices if '2021-05-18 10:' in key.lower()]  # Filter timestamp keys
#     hourly_sum = 0
#     for key in prices_hour_past:
#         hourly_sum += float(prices[key])
#     return hourly_sum / len(prices_hour_past)
